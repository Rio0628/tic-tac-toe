{"version":3,"sources":["components/IndSquare.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["IndSquare","props","className","onClick","value","Board","indSquareCntr","i","push","squares","App","state","gameStarted","history","Array","fill","nmrOfMoves","xIsNext","status","e","target","setState","gameFinished","gamemode","alert","userIsO","userIsX","gameTied","historyViewTrggrd","handleGameClick","a","hist","slice","currentMove","length","calculateWinner","areAllSquaresFilled","square","console","log","every","concat","userOption","cpuOption","cpuMove","Math","floor","random","checkMove","winCombs","b","c","this","current","winner","moves","map","step","move","desc","jumpTo","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.179771c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst IndSquare = (props) => {\r\n    return (\r\n        <div className='indSquare' onClick={props.onClick}>\r\n            {props.value}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndSquare;","import React from 'react';\r\nimport IndSquare from './IndSquare';\r\n\r\nconst Board = (props) => {\r\n    let indSquareCntr = [];\r\n\r\n    // Takes care of bringing each square to view within the game board. \r\n    for (let i = 0; i < 9; i++) {\r\n        indSquareCntr.push( <IndSquare value={props.squares[i]} onClick={() => props.onClick(i)} key={'square ' + i}/>);\r\n    }\r\n\r\n    return (\r\n        <div className='board'>\r\n          {indSquareCntr}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\nimport { BsFillArrowLeftCircleFill } from 'react-icons/bs'\nimport Board from './components/Board';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      history: [{ squares: Array(9).fill(null) }],\n      nmrOfMoves: 0,\n      xIsNext: true, \n    };\n  }\n\n\n  render () {\n\n    const jumpTo = (step) => {\n      // Jump to a certain step within the current game \n      this.setState({\n        nmrOfMoves: step,\n        xIsNext: (step % 2) === 0\n      });\n    }\n\n    const onClick = (e) => {\n      // Main onClick function\n\n      if (e.target.className === 'startGameBtn') {\n        // Starts a game as long as there is a gamemode selected by the user\n        this.setState({ gameFinished: false });\n        if (this.state.gamemode) {\n          this.setState({ gameStarted: true });\n        }\n        else alert('Select Gamemode To Start Game!');\n      }\n\n      if (e.target.className === 'mainMenuBtn') {\n        // Resets all values and brings the user back to the preview view \n        this.setState({ \n          history: [{ squares: Array(9).fill(null) }],\n          nmrOfMoves: 0,\n          gameStarted: false,\n          userIsO: false,\n          userIsX: false,\n          gamemode: '',\n          gameTied: false,     \n        });\n      }\n\n      if (e.target.className === 'replayBtn') {\n        // Resets the values of a game to allow the user to play once again \n        this.setState({ \n          history: [{ squares: Array(9).fill(null) }],\n          nmrOfMoves: 0,\n          gameTied: false,\n        });\n      }\n\n      if (e.target.className === 'historyTrigger' || e.target.className === 'closeViewBtn') {\n        // Takes care of bringing and collapsing the history view in the smaller viewports \n        this.setState({ historyViewTrggrd: !this.state.historyViewTrggrd });\n      }\n\n      if (e.target.className === 'playerOne') {\n        // Selects player one and allows the user to start with \"X\"\n        this.setState({ userIsX: true });\n        this.setState({ userIsO: false });\n        this.setState({ xIsNext: true });\n      }\n\n      if (e.target.className === 'playerTwo') {\n        // Selects player one and allows the user to start with \"O\"\n        this.setState({ userIsO: true });\n        this.setState({ userIsX: false });\n        this.setState({ xIsNext: false });\n      }\n\n      if (e.target.className === 'twoPlayerGame') {\n        // Sets the gamemode value\n        this.setState({ gamemode: 'multiplayer'});\n      }\n\n      if (e.target.className === 'singlePlayerGame') {\n        // Sets the gamemode value\n        this.setState({ gamemode: 'singleplayer'});\n      }\n\n     \n    }\n\n    const handleGameClick = async (i) => {\n      // Main click function for the gameboard\n      if (this.state.gamemode === 'multiplayer') {\n        // Allows two users to play the game and yields a winner\n        const hist = this.state.history.slice(0, this.state.nmrOfMoves + 1);\n        const currentMove = hist[hist.length - 1];\n        const squares = currentMove.squares.slice();\n  \n        if ( calculateWinner(squares) || squares[i] ) return;\n  \n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n        const areAllSquaresFilled = (square) => square !== null;\n        console.log(squares.every(areAllSquaresFilled));\n        if (squares.every(areAllSquaresFilled) && !calculateWinner(squares)) {\n          this.setState({ gameTied: true });\n        }\n\n        if (this.state.gameTied) { this.setState({ xIsNext: !this.state.xIsNext }); }\n\n        this.setState({\n          history: hist.concat([{ squares: squares, }]),\n          nmrOfMoves: hist.length,\n          xIsNext: !this.state.xIsNext,\n        })\n      }\n      else if (this.state.gamemode === 'singleplayer') {\n        // Allows the user to play the game against a simple CPU and yields a winner\n        const hist = this.state.history.slice(0, this.state.nmrOfMoves + 1);\n        const currentMove = hist[hist.length - 1];\n        const squares = currentMove.squares.slice();\n        const userOption = this.state.userIsX ? 'X' : this.state.userIsO ? 'O' : null;\n        const cpuOption = userOption === 'X' ? \"O\" : userOption === 'O' ? 'X' : null;\n        let cpuMove = Math.floor(Math.random() * squares.length);\n       \n        const checkMove = () => {\n          try {\n            if (squares[cpuMove]) {\n              cpuMove = Math.floor(Math.random() * squares.length);\n              checkMove();\n            }\n            else {\n              squares[cpuMove] = cpuOption;\n              if (this.state.userIsO) { this.setState({ xIsNext: true }); }\n              if (this.state.userIsX) { this.setState({ xIsNext: false }); }\n            }\n          } catch {\n            squares[cpuMove] = userOption;\n            this.setState({ gameFinished: true });\n          }\n        }\n\n        if ( calculateWinner(squares) || squares[i] ) { return; }\n        else { checkMove(); };\n\n        squares[i] = await userOption;\n\n        const areAllSquaresFilled = (square) => square !== null;\n        console.log(squares.every(areAllSquaresFilled));\n        if (squares.every(areAllSquaresFilled) && !calculateWinner(squares)) {\n          this.setState({ gameTied: true });\n        }\n\n        this.setState({\n          history: hist.concat([{ squares: squares, }]),\n          nmrOfMoves: hist.length,\n          xIsNext: !this.state.xIsNext,\n        })\n        \n      }\n    }\n\n    const calculateWinner = (squares) => {\n      // Calculates the winner if the values within squares have an existing combination. \n      const winCombs = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n      ];\n\n      for (let i = 0; i < winCombs.length; i++) {\n        const [a, b, c] = winCombs[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) \n        return squares[a];\n      }\n      return null;\n    }\n\n    const checkIfHistoryTrggrd = () => this.state.historyViewTrggrd ? ' active' : ''; // takes care of bringing the history view up (Smaller viewports)\n\n    // Main Variables\n    const history = this.state.history;\n    const current = history[this.state.nmrOfMoves];\n    const winner = calculateWinner(current.squares);\n    let status, gameFinished = false;\n\n    // Takes care of showing the result of the current game \n    if (this.state.gameTied) { gameFinished = true; }\n\n    if (winner) {\n      gameFinished = true;\n      status = `Winner: ${winner}`\n    }\n    else status = `Next Player: ${this.state.xIsNext ? \"X\" : \"O\"} `;\n\n    const moves = history.map((step, move) => {\n      // Brings each move made by the users to view in the history view \n      const desc = move ? `Go to move #${move}` : `Go to game start`;\n      return ( <p className='indPastMove' onClick={() => jumpTo(move)} key={'past move ' + move}>{desc}</p> );\n    })\n\n    // Functions that take care of showing user input within the preview view\n    const userPickedX = () => this.state.userIsX ? ' active' : '';\n    const userPickedO = () => this.state.userIsO ? ' active' : '';\n    const gamemodeIsOne = () => this.state.gamemode === 'singleplayer' ? ' active' : '';\n    const gamemodeIsMulti = () => this.state.gamemode === 'multiplayer' ? ' active' : '';\n\n    return (\n      <div className=\"container\">\n        \n        { this.state.gameStarted ? \n          <div className='mainGameView'>\n            <div className='navBar'>\n              <p className='winnerHeading'>{this.state.gameTied ? 'Winner: Tie!' : status}</p>\n  \n              <p className='historyTrigger' onClick={onClick}>History</p>\n            </div>\n  \n            { gameFinished ? \n              <div className='gameEndOptions'>\n                <p className='replayBtn' onClick={onClick}>Replay</p>\n                <p className='mainMenuBtn' onClick={onClick}>Main Menu</p>\n              </div>\n            : null } \n            \n  \n            <Board squares={current.squares} onClick={(i) => handleGameClick(i)} />\n          </div>\n        : \n          <div className='previewView'>\n            <div className='previewViewBtnsCntr'>\n              <p className='previewVieHeading'>Tic-Tac-Toe.</p>\n\n              <div className='chooseBtnsCntr'>\n                <p className={'playerOne' + userPickedX()} onClick={onClick}>X</p>\n                <p className={'playerTwo' + userPickedO()} onClick={onClick}>O</p>\n              </div>\n\n              <div className='chooseGmdeCntr'>\n                <p className={'twoPlayerGame' + gamemodeIsMulti()} onClick={onClick}>Player Vs. Player</p>\n                <p className={'singlePlayerGame' + gamemodeIsOne()} onClick={onClick}>CPU Vs. Player</p>\n              </div>\n\n              <p className='startGameBtn' onClick={onClick}>Start Game</p>\n            </div>\n          </div>\n        }\n\n  \n        <div className={'historyView' + checkIfHistoryTrggrd()}>\n          <div className='heading-btnCntr'>\n            <div className='closeViewBtn' onClick={onClick}><BsFillArrowLeftCircleFill className='icon'/></div>\n  \n            <p className='historyViewHdng'>History</p>\n          </div>\n  \n          <div className='indPastMovesCntr'>\n            {this.state.gameStarted ? moves : ''}\n          </div>\n        </div> \n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}